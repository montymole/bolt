/*--------------------------------------*/
/*  TPL loop    */
/*--------------------------------------*/
var lt = function(
  t, // tpl name 
  d, // data
  l, // data len
  h // html
) {
  l = d.length;
  h = '';
  for (var i = 0; i < l; i++) {
    h += v[t](d[i]);
  }
  return h;
};

/*--------------------------------------*/
/* Templating
/* var hello = 
/* t("Hello, #{this.name || 'world'}!") 
/*--------------------------------------*/

var t = function(
  a, // the string source from which the template is compiled
  b // the default `with` context of the template (optional)
) {
  return function(
    c, // the object called as `this` in the template
    d // the `with` context of this template call (optional)
  ) {
    return a.replace(
      /#{([^}]*)}/g, // a regexp that finds the interpolated code: "#{<code>}"

      function(
        a, // not used, only positional
        e // the code matched by the interpolation
      ) {
        /*jshint -W061 */
        return Function("x", "with(x)return " + e).call(c, d || b || {});
      }
    );
  };
};

var $ = function(
  a, // take a simple selector like "name", "#name", or ".name", and
  b // an optional context, and
) {
  a = a.match(/^(\W)?(.*)/); // split the selector into name and symbol.
  return (b || document)[
    "getElement" + ( // obtained by the appropriate method calculated by
      a[1] ? a[1] == "#" ? "ById" // the node by ID,
      : "sByClassName" // the nodes by class name, or
      : "sByTagName" // the nodes by tag name,
    )
  ](
    a[2] // called with the name.
  );
};

/*--------------------------------------*/
/*  multiget elements to hash           */
/*--------------------------------------*/
var $A = function(el, ids, id) {

  while (ids.length) {
    id = ids.shift();
    el[id] = $('#' + id);
  }
};

/*
 * Create DOM element
 *
 * Usage:
 *   var el = m('<h1>Hello</h1>');
 *   document.body.appendChild(el);
 *
 *
 *            DO WHAT THE FUCK YOU WANT TO PUBLIC LICENSE
 *                    Version 2, December 2004
 *
 * Copyright (C) 2011 Jed Schmidt <http://jed.is> - WTFPL
 * More: https://gist.github.com/966233
 *
 */

var m = function(
    a, // an HTML string
    b, // placeholder
    c // placeholder
) {
    b = document; // get the document,
    c = b.createElement("p"); // create a container element,
    c.innerHTML = a; // write the HTML to it, and
    a = b.createDocumentFragment(); // create a fragment.

    while ( (b = c.firstChild) ) a.appendChild(b); // append the child to the fragment,

    return a; // and then return the fragment.
};


/*
 * Get cross browser xhr object
 */

var j = function(
  a // cursor placeholder
) {
  for ( // for all a
    a = 0; // from 0
    a < 4; // to 4,
    a++ // incrementing
  ) try { // try
    return a ? new ActiveXObject( // a new ActiveXObject
      [ // reflecting
        , // (elided)
        "Msxml2", // the various
        "Msxml3", // working
        "Microsoft" // options
      ][a] + // for Microsoft implementations, and
      ".XMLHTTP" // the appropriate suffix,
    ) // but make sure to
    : new XMLHttpRequest(); // try the w3c standard first, and
  } catch (e) {} // ignore when it fails.
};

var tpl={"error":"<div class=\"error\"><b>#{this.code}</b> : #{this.message}</div>","jokeView":"<h1>#{this.title}</h1><p>#{this.joke1}</p><p>#{this.joke2}</p>and one more...<p>#{this.joke3}</p><a href=\"javascript:jokeVow.yield()\">More jokes?</a>"};
/*--------------------------------------*/
/* 2014 Jussi Löf
/*--------------------------------------*/
/* BOLT, Auto-updating templates
/*--------------------------------------*/

function Bolt(obj, view, el) {

    this.obj = obj;
    this.view = view;
    this.el = el;
    this.autorefresh = true;

    for (var key in obj) {
        this.screw(key);
    }

    this.refresh();

}

Bolt.prototype = {
    /*-------------------------------------------*/
    /*  Add (screw in) watcher to the bolted object
/*-------------------------------------------*/

    screw: function(key) {

        this.__defineSetter__(key, function(val) {
            this.obj[key] = val;
            if (this.autorefresh)
                this.refresh();
        });

        this.__defineGetter__(key, function() {
            return this.obj[key];
        });

    },

    /*--------------------------------------*/
    /*  populate with incoming object       */
    /*--------------------------------------*/
    populate: function(obj, key) {

        for (key in obj) {
            if (this[key] === undefined) this.screw(key);
            this[key] = obj[key];
        }

    },

    renderer: function(viewObject, property, key) {

        viewObject = {};

        //create a copy of object
        for (key in this.obj) {

            property = this.obj[key];

            //recurse sub-bolts
            if (property.renderer) {
                viewObject[key] = property.renderer();
            } else
                viewObject[key] = property;
        }

        return this.view(viewObject);

    },
    refresh: function(el, newEl) {
        el = $(this.el);
        if (el) {
            el.innerHTML = this.renderer();
        }
    }
}

/*--------------------------------------*/
/* 2014 Jussi Löf
/*--------------------------------------*/
/* VOW, way to do yielding promises
/*--------------------------------------*/

function Vow(obj) {

    this.obj = obj;
    this.oaths = {};
    this.oathsTotal = 0;
    this.oathsToFill = 0;
    this.oathsFilled = 0;

}

Vow.prototype = {
    promise: function(property, getter) {

        if (this.oaths[property]) {
            this.unPromise(property);
        }

        this.oaths[property] = {
            property: property,
            getter: getter
        };

        this.oathsTotal++;
    },

    unPromise: function(property) {
        delete this.oaths[property];
        this.oathsTotal--;
    },

    get: function(oath) {

        var vow = this;

        oath.getter(function(result) {
            vow.obj[oath.property] = result;
            vow.oathsFilled++;
            if (vow.oathsFilled == vow.oathsToFill) {
                if (vow.callback) vow.callback(vow.obj);
            }
        });
    },

    yield: function(callback) {

        this.callback = callback;
        this.oathsFilled = 0;
        this.oathsToFill = this.oathsTotal;

        for (var o in this.oaths) {
            this.get(this.oaths[o]);
        }
    }
}

/*--------------------------------------*/
/*  How to do REST API    */ 
/*--------------------------------------*/
function Api(opts) {
    for (var k in opts) {
        this[k] = opts[k];
    }
}

Api.prototype = {

    debugCb: function(r) {
        console.log(r);
    },

    get: function(cb, x) {
        if (!cb) cb = this.debugCb;
        x = j();
        x.cb = cb;
        x.onreadystatechange = this.handleStateChanges;
        x.open('GET', this.url, true);
        x.send();
    },

    handleStateChanges: function() {
        if (this.readyState != 4) return;
        this.cb(JSON.parse(this.responseText));
    }
};

var api_desc = {
    icndb: {
        url: 'http://api.icndb.com/jokes/random?firstName=Monty&lastName=Mole',
    }
};

window.API = {};

for (var k in api_desc) {
    window.API[k] = new Api(api_desc[k]);
}

/*--------------------------------------*/
/*  Compile templates                   */
/*--------------------------------------*/

var v = {}; /* compiled templates */
for (var k in tpl) {
    v[k] = t(tpl[k]);
}

/*--------------------------------------*/
/*  App Code -->    */
/*--------------------------------------*/


var jokes = {
    title: 'Bolt & Vow Test',
    joke1: 'waiting for result...',
    joke2: 'waiting for result...',
    joke3: 'waiting for result...'
};

//when stuff changes render jokeView inside #app element
var jokeBolt = new Bolt(jokes, v.jokeView, '#app');

//if you want them to work together make your Vow to stuffBolt, not
//directly to stuff, you can still write to stuff.something and it changes
//accordingly

var jokeVow = new Vow(jokeBolt);

function getJoke(cb) {
    API.icndb.get(function(r) {
        cb(r.value.joke);
    });
}

function init() {
    // boltPromiseTest();
    //lets get some chuck norris data
    jokeVow.promise("joke1", getJoke);
    jokeVow.promise("joke2", getJoke);
    jokeVow.promise("joke3", getJoke);
    jokeVow.yield();


}

document.addEventListener('DOMContentLoaded', init, false);
